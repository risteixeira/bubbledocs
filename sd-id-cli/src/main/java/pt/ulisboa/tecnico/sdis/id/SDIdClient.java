package pt.ulisboa.tecnico.sdis.id;

import static javax.xml.bind.DatatypeConverter.printHexBinary;

import java.net.MalformedURLException;
import java.net.URL;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Arrays;
import java.util.Map;

import javax.xml.ws.BindingProvider;

import pt.ulisboa.tecnico.sdis.id.ws.AuthReqFailed_Exception;
import pt.ulisboa.tecnico.sdis.id.ws.EmailAlreadyExists_Exception;
import pt.ulisboa.tecnico.sdis.id.ws.InvalidEmail_Exception;
import pt.ulisboa.tecnico.sdis.id.ws.InvalidUser_Exception;
import pt.ulisboa.tecnico.sdis.id.ws.SDId; // classes generated from WSDL
import pt.ulisboa.tecnico.sdis.id.ws.SDId_Service;
import pt.ulisboa.tecnico.sdis.id.ws.UserAlreadyExists_Exception;
import pt.ulisboa.tecnico.sdis.id.ws.UserDoesNotExist_Exception;

public class SDIdClient implements SDId {
	/**
	 * SDId client.
	 *
	 * Adds easier endpoint address configuration to the PortType generated by
	 * wsimport.
	 *
	 * Could also be extended to add UDDI lookup capability.
	 */

	/** WS service */
	SDId_Service service = null;

	/** WS port (interface) */
	SDId port = null;

	/** WS endpoint address */
	// default value is defined by WSDL
	private String wsURL = null;

	/** output option **/
	private boolean verbose = false;

	public boolean isVerbose() {
		return verbose;
	}

	public void setVerbose(boolean verbose) {
		this.verbose = verbose;
	}

	/** constructor with provided web service URL */
	public SDIdClient(String wsURL, URL url) throws SDIdClientException {
		this.wsURL = wsURL;
		createStub(url);
	}

	/** default constructor uses default endpoint address */
	public SDIdClient(URL url) throws SDIdClientException {
		System.out.println(url.getPath());
		System.out.println(url);
		createStub(url);
	}

	public SDIdClient() throws SDIdClientException{
		URL url = null;
		try {
			url = new URL("http://localhost:8080/sd-id/endpoint");
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		createStub(url);
		
	}

	/** Stub creation and configuration */
	protected void createStub(URL url) {
		if (verbose)
			System.out.println("Creating stub ...");
		service = new SDId_Service(url);
		port = service.getSDIdImplPort();

		if (wsURL != null) {
			if (verbose)
				System.out.println("Setting endpoint address ...");
			BindingProvider bindingProvider = (BindingProvider) port;
			
			Map<String, Object> requestContext = bindingProvider
					.getRequestContext();
			requestContext
					.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, wsURL);
		}
	}

	protected void createStub() {
		if (verbose)
			System.out.println("Creating stub ...");
		service = new SDId_Service();
		port = service.getSDIdImplPort();

		if (wsURL != null) {
			if (verbose)
				System.out.println("Setting endpoint address ...");
			BindingProvider bindingProvider = (BindingProvider) port;
			
			Map<String, Object> requestContext = bindingProvider
					.getRequestContext();
			requestContext
					.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, wsURL);
		}
	}
	
	// SDIdPortType

	public void createUser(String userId, String emailAddress)
			throws EmailAlreadyExists_Exception, InvalidEmail_Exception,
			InvalidUser_Exception, UserAlreadyExists_Exception {

		port.createUser(userId, emailAddress);
	}

	public void renewPassword(String userId) throws UserDoesNotExist_Exception {

		port.renewPassword(userId);
	}

	public void removeUser(String userId) throws UserDoesNotExist_Exception {

		port.removeUser(userId);
	}

	public byte[] requestAuthentication(String userId, byte[] reserved)
			throws AuthReqFailed_Exception {

		SecureRandom random;
		final int secureNumberBound = 254;
		int secureNumber = 0;

		try {
			random = SecureRandom.getInstance("SHA1PRNG");
			secureNumber = random.nextInt(secureNumberBound);
		} catch (NoSuchAlgorithmException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		String requestString = null;
		requestString = "P=" + new String(reserved)
				+ ",SD-STORE," + secureNumber;

		byte[] response = port.requestAuthentication(userId, requestString.getBytes());
		byte[] ticket = null;
		byte[] clientResponse = null;

		for (int i = 0; i < response.length; i++){
			if (response[i] == 0x00 && response[i+1] == 0x00){
				ticket = Arrays.copyOfRange(response, 0, i);
				clientResponse = Arrays.copyOfRange(response, i+2, response.length);
				break;
			}
		}
		
		byte[] decriptedClientResponse = null;
		try {
			Key clientKey = AuthenticationKeys.makeKeySpec(AuthenticationKeys.hashPassword(new String(reserved)));
			decriptedClientResponse = AuthenticationKeys.decrypt(clientKey, clientResponse);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		byte[] keyClientServerBytes = null;
		byte[] nonceBytes = null;
		
		for (int i = 0; i < decriptedClientResponse.length; i++){
			if (decriptedClientResponse[i] == 0x00 && decriptedClientResponse[i+1] == 0x00){
				keyClientServerBytes = Arrays.copyOfRange(decriptedClientResponse, 0, i);
				nonceBytes = Arrays.copyOfRange(decriptedClientResponse, i+2, decriptedClientResponse.length);
				break;
			}
		}
		
		if (!(Integer.parseInt(printHexBinary(nonceBytes), 16) == secureNumber + 1)) {
			throw new AuthReqFailed_Exception("Authentication failed", null);
		}
		
		return ticket;
	}
}
